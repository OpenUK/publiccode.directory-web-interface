{"version":3,"file":"index.min.js","sources":["../../src/MockStorage.ts","../../src/SimplePromiseQueue.ts","../../src/index.ts"],"sourcesContent":["/**\n * Created by championswimmer on 22/07/17.\n */\nexport default class MockStorage implements Storage {\n  [index: number]: string;\n  [key: string]: any;\n\n  public get length(): number {\n    return Object.keys(this).length\n  }\n\n  public key(index: number): string | any {\n    return Object.keys(this)[index]\n  }\n\n  public setItem(key: string, data: any): void {\n    this[key] = data.toString()\n  }\n  public getItem(key: string): string {\n    return this[key]\n  }\n  public removeItem(key: string): void {\n    delete this[key]\n  }\n  public clear(): void {\n    for (const key of Object.keys(this)) {\n      delete this[key]\n    }\n  }\n}\n","// tslint:disable: variable-name\nexport default class SimplePromiseQueue {\n  private readonly _queue: Array<Promise<void>> = []\n  private _flushing = false\n\n  public enqueue(promise: Promise<void>) {\n    this._queue.push(promise)\n    if (!this._flushing) { return this.flushQueue() }\n    return Promise.resolve()\n  }\n\n  private flushQueue() {\n    this._flushing = true\n\n    const chain = (): Promise<void> | void => {\n      const nextTask = this._queue.shift()\n      if (nextTask) {\n        return nextTask.then(chain)\n      } else {\n        this._flushing = false\n      }\n    }\n    return Promise.resolve(chain())\n  }\n}\n","/**\n * Created by championswimmer on 18/07/17.\n */\nimport merge from 'lodash.merge'\nimport {Mutation, MutationPayload, Payload, Plugin, Store} from 'vuex'\nimport {AsyncStorage} from './AsyncStorage'\nimport MockStorage from './MockStorage'\nimport {PersistOptions} from './PersistOptions'\nimport SimplePromiseQueue from './SimplePromiseQueue'\n\nlet CircularJSON = JSON\n/**\n * A class that implements the vuex persistence.\n */\nexport class VuexPersistence<S, P extends Payload> implements PersistOptions<S> {\n  public asyncStorage: boolean\n  public storage: Storage | AsyncStorage\n  public restoreState: (key: string, storage?: AsyncStorage | Storage) => Promise<S> | S\n  public saveState: (key: string, state: {}, storage?: AsyncStorage | Storage) => Promise<void> | void\n  public reducer: (state: S) => {}\n  public key: string\n  public filter: (mutation: Payload) => boolean\n  public modules: string[]\n  public strictMode: boolean\n  public supportCircular: boolean\n\n  /**\n   * The plugin function that can be used inside a vuex store.\n   */\n  public plugin: Plugin<S>\n  /**\n   * A mutation that can be used to restore state\n   * Helpful if we are running in strict mode\n   */\n  public RESTORE_MUTATION: Mutation<S>\n  public subscribed: boolean\n\n  // tslint:disable-next-line:variable-name\n  private _mutex = new SimplePromiseQueue()\n\n  /**\n   * Create a {@link VuexPersistence} object.\n   * Use the <code>plugin</code> function of this class as a\n   * Vuex plugin.\n   * @param {PersistOptions} options\n   */\n  public constructor(options: PersistOptions<S>) {\n    this.key = ((options.key != null) ? options.key : 'vuex')\n\n    this.subscribed = false\n    this.supportCircular = options.supportCircular || false\n    if (this.supportCircular) {\n      CircularJSON = require('circular-json')\n    }\n\n    this.storage =\n      ((options.storage != null)\n        ? options.storage\n        : (typeof window === 'undefined')\n          ? (new MockStorage())\n          : window.localStorage\n      )\n\n    /**\n     * How this works is -\n     *  1. If there is options.reducer function, we use that, if not;\n     *  2. We check options.modules;\n     *    1. If there is no options.modules array, we use entire state in reducer\n     *    2. Otherwise, we create a reducer that merges all those state modules that are\n     *        defined in the options.modules[] array\n     * @type {((state: S) => {}) | ((state: S) => S) | ((state: any) => {})}\n     */\n    this.reducer = (\n      (options.reducer != null)\n        ? options.reducer\n        : (\n          (options.modules == null)\n            ? ((state: S) => state)\n            : (\n              (state: any) =>\n                (options.modules as string[]).reduce((a, i) =>\n                  merge(a, { [i]: state[i] }), {})\n            )\n        )\n    )\n\n    this.filter = (\n      (options.filter != null)\n        ? options.filter\n        : ((mutation) => true)\n    )\n\n    this.strictMode = options.strictMode || false\n\n    this.RESTORE_MUTATION = function RESTORE_MUTATION(state: S, savedState: any) {\n      const mergedState = merge({}, state, savedState)\n      for (const propertyName of Object.keys(mergedState)) {\n        (this as any)._vm.$set(state, propertyName, mergedState[propertyName])\n      }\n    }\n\n    this.asyncStorage = options.asyncStorage || false\n    const storageConfig = this.storage && ((this.storage) as any)._config\n    this.asyncStorage = this.asyncStorage || (storageConfig && storageConfig.name) === 'localforage'\n\n    if (this.asyncStorage) {\n\n      /**\n       * Async {@link #VuexPersistence.restoreState} implementation\n       * @type {((key: string, storage?: Storage) =>\n       *      (Promise<S> | S)) | ((key: string, storage: AsyncStorage) => Promise<any>)}\n       */\n      this.restoreState = (\n        (options.restoreState != null)\n          ? options.restoreState\n          : ((key: string, storage: AsyncStorage) =>\n              (storage ).getItem(key)\n                .then((value) =>\n                  typeof value === 'string' // If string, parse, or else, just return\n                    ? (\n                      this.supportCircular\n                        ? CircularJSON.parse(value || '{}')\n                        : JSON.parse(value || '{}')\n                    )\n                    : (value || {})\n                )\n          )\n      )\n\n      /**\n       * Async {@link #VuexPersistence.saveState} implementation\n       * @type {((key: string, state: {}, storage?: Storage) =>\n       *    (Promise<void> | void)) | ((key: string, state: {}, storage?: Storage) => Promise<void>)}\n       */\n      this.saveState = (\n        (options.saveState != null)\n          ? options.saveState\n          : ((key: string, state: {}, storage: AsyncStorage) =>\n              (storage).setItem(\n                key, // Second argument is state _object_ if localforage, stringified otherwise\n                (((storage && storage._config && storage._config.name) === 'localforage')\n                  ? merge({}, state)\n                  : (\n                      this.supportCircular\n                        ? CircularJSON.stringify(state) as any\n                        : JSON.stringify(state) as any\n                    )\n                )\n              )\n          )\n      )\n\n      /**\n       * Async version of plugin\n       * @param {Store<S>} store\n       */\n      this.plugin = (store: Store<S>) => {\n        ((this.restoreState(this.key, this.storage)) as Promise<S>).then((savedState) => {\n          /**\n           * If in strict mode, do only via mutation\n           */\n          if (this.strictMode) {\n            store.commit('RESTORE_MUTATION', savedState)\n          } else {\n            store.replaceState(merge(store.state, savedState))\n          }\n\n          this.subscriber(store)((mutation: MutationPayload, state: S) => {\n            if (this.filter(mutation)) {\n              this._mutex.enqueue(\n                this.saveState(this.key, this.reducer(state), this.storage) as Promise<void>\n              )\n            }\n          })\n          this.subscribed = true\n        })\n      }\n    } else {\n\n      /**\n       * Sync {@link #VuexPersistence.restoreState} implementation\n       * @type {((key: string, storage?: Storage) =>\n       *    (Promise<S> | S)) | ((key: string, storage: Storage) => (any | string | {}))}\n       */\n      this.restoreState = (\n        (options.restoreState != null)\n          ? options.restoreState\n          : ((key: string, storage: Storage) => {\n             const value = (storage).getItem(key)\n             if (typeof value === 'string') {// If string, parse, or else, just return\n                return (\n                  this.supportCircular\n                    ? CircularJSON.parse(value || '{}')\n                    : JSON.parse(value || '{}')\n                )\n             } else {\n               return (value || {})\n             }\n          })\n      )\n\n      /**\n       * Sync {@link #VuexPersistence.saveState} implementation\n       * @type {((key: string, state: {}, storage?: Storage) =>\n       *     (Promise<void> | void)) | ((key: string, state: {}, storage?: Storage) => Promise<void>)}\n       */\n      this.saveState = (\n        (options.saveState != null)\n          ? options.saveState\n          : ((key: string, state: {}, storage: Storage) =>\n              (storage).setItem(\n                key, // Second argument is state _object_ if localforage, stringified otherwise\n                (\n                  this.supportCircular\n                    ? CircularJSON.stringify(state) as any\n                    : JSON.stringify(state) as any\n                )\n              )\n          )\n      )\n\n      /**\n       * Sync version of plugin\n       * @param {Store<S>} store\n       */\n      this.plugin = (store: Store<S>) => {\n        const savedState = this.restoreState(this.key, this.storage) as S\n\n        if (this.strictMode) {\n          store.commit('RESTORE_MUTATION', savedState)\n        } else {\n          store.replaceState(merge(store.state, savedState))\n        }\n\n        this.subscriber(store)((mutation: MutationPayload, state: S) => {\n          if (this.filter(mutation)) {\n            this.saveState(this.key, this.reducer(state), this.storage)\n          }\n        })\n\n        this.subscribed = true\n      }\n    }\n  }\n\n  /**\n   * Creates a subscriber on the store. automatically is used\n   * when this is used a vuex plugin. Not for manual usage.\n   * @param store\n   */\n  private subscriber = (store: Store<S>) =>\n    (handler: (mutation: MutationPayload, state: S) => any) => store.subscribe(handler)\n}\n\nexport {\n  MockStorage, AsyncStorage, PersistOptions\n}\n\nexport default VuexPersistence\n"],"names":["Object","MockStorage","keys","this","length","index","key","data","toString","_a","_i","SimplePromiseQueue","promise","_queue","push","_flushing","Promise","resolve","flushQueue","chain","nextTask","_this","shift","then","CircularJSON","JSON","options","store","handler","subscribe","subscribed","supportCircular","require","storage","window","localStorage","reducer","modules","state","reduce","a","i","merge","filter","mutation","strictMode","RESTORE_MUTATION","savedState","mergedState","propertyName","_vm","$set","asyncStorage","storageConfig","_config","name","restoreState","getItem","value","parse","saveState","setItem","stringify","plugin","commit","replaceState","subscriber","_mutex","enqueue"],"mappings":"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"}